{"version":3,"sources":["logo.svg","reducer/counter.reducer.js","constants/constants.js","context/Counter.context.jsx","actions/counter.actions.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","reducer","state","action","type","counter","CounterContext","createContext","CounterProvider","children","React","useReducer","dispatch","value","increment","decrement","Provider","App","useContext","useState","todo","setTodo","loading","setLoading","name","setName","setErrors","fetchData","useCallback","fetch","then","res","json","data","result","useEffect","className","onSubmit","event","preventDefault","headers","method","body","JSON","stringify","title","catch","err","placeholder","onChange","target","map","t","key","_id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,8HCEpC,SAASC,EAAQC,EAAOC,GAC3B,OAAQA,EAAOC,MACX,ICJiB,YDKb,OAAO,eAAKF,EAAZ,CAAmBG,QAASH,EAAMG,QAAU,IAChD,ICLiB,YDMb,OAAO,eAAKH,EAAZ,CAAmBG,QAASH,EAAMG,QAAU,IAChD,QACI,OAAOH,GELZ,IAAMI,EAAiBC,0BAEjBC,EAAkB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAKrBC,IAAMC,WAAWV,EAJtB,CACnBI,QAAS,IAFoC,mBAKxCH,EALwC,KAKjCU,EALiC,KAQzCC,EAAQ,CACZR,QAFkBH,EAAZG,QAGNS,UAAW,kBCdR,SAAmBF,GACtBA,EAAS,CAAER,KFHU,cCgBJU,CAAUF,IAC3BG,UAAW,kBCZR,SAAmBH,GACtBA,EAAS,CAAER,KFLU,cCgBJW,CAAUH,KAE7B,OACE,kBAACN,EAAeU,SAAhB,CAAyBH,MAAOA,GAAQJ,IE8C7BQ,MA5Df,WAAgB,IAAD,EAC6BP,IAAMQ,WAAWZ,GAD9C,KACLD,QADK,EACIS,UADJ,EACeC,UACJL,IAAMS,SAAS,KAF1B,mBAENC,EAFM,KAEAC,EAFA,OAGiBX,IAAMS,UAAS,GAHhC,mBAGNG,EAHM,KAGGC,EAHH,OAIWb,IAAMS,SAAS,IAJ1B,mBAINK,EAJM,KAIAC,EAJA,OAKef,IAAMS,SAAS,IAL9B,mBAKEO,GALF,WAOPC,EAAYjB,IAAMkB,aAAY,WAClCC,MAAM,SACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLZ,EAAQY,EAAKC,QACbX,GAAW,SAsBjB,OAnBAb,IAAMyB,WAAU,WACdR,MACC,IAiBIL,EACL,0CAEE,yBAAKc,UAAU,OAEb,kEACA,0BAAMC,SArBZ,SAAsBC,GACpBA,EAAMC,iBACNV,MAAM,QAAS,CACbW,QAAS,CACP,eAAgB,oBAElBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEC,MAAOrB,MAE7BM,MAAK,WACJL,EAAQ,IACRE,OAEDmB,OAAM,SAACC,GAAD,OAASrB,EAAUqB,QAStB,yCACA,2BACE3C,KAAK,OACL4C,YAAY,oBACZnC,MAAOW,EACPyB,SAAU,SAACX,GAAD,OAAWb,EAAQa,EAAMY,OAAOrC,UAE5C,4BAAQT,KAAK,UAAb,SAGDgB,EAAK+B,KAAI,SAACC,GACT,OAAO,wBAAIC,IAAKD,EAAEE,KAAMF,EAAEP,YC9ChBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,KACE,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdvB,OAAM,SAAAwB,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.22ef21ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { INCREMENT, DECREMENT } from \"../constants/constants\";\n\nexport function reducer(state, action) {\n    switch (action.type) {\n        case INCREMENT:\n            return { ...state, counter: state.counter + 1 };\n        case DECREMENT:\n            return { ...state, counter: state.counter - 1 };\n        default:\n            return state;\n    }\n}\n","export const INCREMENT = \"INCREMENT\";\nexport const DECREMENT = \"DECREMENT\";\n","import React, { createContext } from \"react\";\nimport { reducer } from \"../reducer/counter.reducer\";\nimport { increment, decrement } from \"../actions/counter.actions\";\n\nexport const CounterContext = createContext();\n\nexport const CounterProvider = ({ children }) => {\n  const initialState = {\n    counter: 0,\n  };\n\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n\n  const { counter } = state;\n  const value = {\n    counter,\n    increment: () => increment(dispatch),\n    decrement: () => decrement(dispatch),\n  };\n  return (\n    <CounterContext.Provider value={value}>{children}</CounterContext.Provider>\n  );\n};\n","import { INCREMENT, DECREMENT } from \"../constants/constants\";\n\nexport function increment(dispatch) {\n    dispatch({ type: INCREMENT });\n}\nexport function decrement(dispatch) {\n    dispatch({ type: DECREMENT });\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport TodoList from \"./TodoList\";\nimport { CounterContext } from \"./context/Counter.context\";\n\nfunction App() {\n  const { counter, increment, decrement } = React.useContext(CounterContext);\n  const [todo, setTodo] = React.useState([]);\n  const [loading, setLoading] = React.useState(true);\n  const [name, setName] = React.useState(\"\");\n  const [errors, setErrors] = React.useState(\"\");\n\n  const fetchData = React.useCallback(() => {\n    fetch(\"/todo\")\n      .then((res) => res.json())\n      .then((data) => {\n        setTodo(data.result);\n        setLoading(false);\n      });\n  });\n  React.useEffect(() => {\n    fetchData();\n  }, []);\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    fetch(\"/todo\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      method: \"post\",\n      body: JSON.stringify({ title: name }),\n    })\n      .then(() => {\n        setName(\"\");\n        fetchData();\n      })\n      .catch((err) => setErrors(err));\n  }\n  return loading ? (\n    <h1>Loading...</h1>\n  ) : (\n      <div className=\"App\">\n        {/* <TodoList /> */}\n        <h1>Welcome to the todolist creator ! </h1>\n        <form onSubmit={handleSubmit}>\n          <label>Name: </label>\n          <input\n            type=\"text\"\n            placeholder=\"name of your todo\"\n            value={name}\n            onChange={(event) => setName(event.target.value)}\n          />\n          <button type=\"submit\">Send</button>\n        </form>\n\n        {todo.map((t) => {\n          return <h1 key={t._id}>{t.title}</h1>;\n        })}\n\n\n      </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { CounterProvider } from \"./context/Counter.context\";\n\nReactDOM.render(\n  <CounterProvider>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </CounterProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}